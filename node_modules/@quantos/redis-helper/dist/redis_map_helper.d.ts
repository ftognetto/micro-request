import * as redis from 'redis';
export interface RedisMapHelperConfig<T> {
    client?: redis.RedisClient;
    host?: string;
    port?: number;
    prefix?: string;
    keyExtractor: (obj?: T) => string;
    ttl?: number;
}
export declare class RedisMapHelper<T> {
    _redis: redis.RedisClient;
    private _getAsync;
    private _setAsync;
    private _setExAsync;
    private _delAsync;
    private _lpushAsync;
    private _rpushAsync;
    private _lpopAsync;
    private _rpopAsync;
    private _lrangeAsync;
    private _lindexAsync;
    private _prefix;
    private _key;
    private _ttl;
    private _cacheDisabled;
    constructor(config: RedisMapHelperConfig<T>);
    getCacheds(ids: string[]): Promise<T[]>;
    getCached(id: string): Promise<T | null>;
    setCached(values: T[]): Promise<void>;
    delCached(id: string): Promise<void>;
    pop(atTheEnd?: boolean): Promise<void>;
    push(value: T, append?: boolean): Promise<void>;
    listRange(start: number, end: number): Promise<T[]>;
    listGet(index: number): Promise<T | null>;
    listClear(): Promise<void>;
}
