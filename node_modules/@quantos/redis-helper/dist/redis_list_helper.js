"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisListHelper = void 0;
const redis = __importStar(require("redis"));
const util_1 = require("util");
class RedisListHelper {
    constructor(config) {
        this._cacheDisabled = false;
        if (config.client) {
            this._redis = config.client;
        }
        else if (config.port && config.host) {
            this._redis = redis.createClient(config.port, config.host, { enable_offline_queue: false });
        }
        else {
            throw Error('[@quantos/redis-helper][RedisValueHelper] invalid configuration. A client or host and port must be supplied.');
        }
        const _self = this;
        this._redis.on('error', function (error) {
            console.error(error);
            if (error.code === 'ECONNREFUSED') {
                _self._cacheDisabled = true;
            }
            if (error.code === 'ETIMEDOUT') {
                _self._cacheDisabled = true;
                setTimeout(() => { _self._cacheDisabled = false; }, 10000);
            }
        });
        this._prefix = config.prefix || '';
        this._key = (obj) => `${config.prefix}:${config.keyExtractor(obj)}`;
        this._ttl = config.ttl || 60 * 5;
        this._getAsync = util_1.promisify(this._redis.get).bind(this._redis);
        this._setAsync = util_1.promisify(this._redis.setex).bind(this._redis);
        this._lpushAsync = util_1.promisify(this._redis.lpush).bind(this._redis);
    }
    getCacheds(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const cacheds = [];
            if (this._cacheDisabled) {
                return cacheds;
            }
            try {
                for (const id of ids) {
                    try {
                        const data = yield this._getAsync(`${this._prefix}:${id}`);
                        if (data) {
                            const cached = JSON.parse(data);
                            cacheds.push(cached);
                        }
                    }
                    catch (e) {
                    }
                }
            }
            catch (e) {
                console.log(e);
            }
            return cacheds;
        });
    }
    getCached(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const cacheds = yield this.getCacheds([id]);
            if (cacheds && cacheds.length) {
                return cacheds[0];
            }
            else {
                return null;
            }
        });
    }
    setCached(values) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._cacheDisabled) {
                return;
            }
            for (const value of values) {
                try {
                    yield this._setAsync(this._key(value), this._ttl, JSON.stringify(value));
                }
                catch (e) {
                }
            }
        });
    }
    lPush(value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._cacheDisabled) {
                return;
            }
            try {
                yield this._lpushAsync(this._key(value), JSON.stringify(value));
            }
            catch (e) {
            }
        });
    }
}
exports.RedisListHelper = RedisListHelper;
//# sourceMappingURL=redis_list_helper.js.map